name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: cloud_security_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install backend dependencies
        working-directory: ./cloud-security-backend
        run: npm install --legacy-peer-deps

      - name: Lint backend
        working-directory: ./cloud-security-backend
        run: echo "No lint configured"

      - name: Run backend tests
        working-directory: ./cloud-security-backend
        env:
          POSTGRES_URI: postgres://postgres:postgres@localhost:5432/cloud_security_test
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: npm test -- --forceExit --detectOpenHandles --watchAll=false --passWithNoTests

  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install frontend dependencies
        working-directory: ./frontReact
        run: npm install --legacy-peer-deps

      - name: Lint frontend
        working-directory: ./frontReact
        run: echo "No lint configured"

      - name: Run frontend tests
        working-directory: ./frontReact
        run: npm test -- --watchAll=false --passWithNoTests

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build backend Docker image
        working-directory: ./cloud-security-backend
        run: docker build -t sarrarejeb01/cloud-backend:latest .

      - name: Build frontend Docker image
        working-directory: ./frontReact
        run: docker build -t sarrarejeb01/cloud-frontend:latest .

      - name: Push Docker images
        run: |
          docker push sarrarejeb01/cloud-backend:latest
          docker push sarrarejeb01/cloud-frontend:latest
