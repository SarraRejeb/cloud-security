name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # ---------------------
  # 1️⃣ TESTS BACKEND
  # ---------------------
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: cloud_security_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install backend dependencies
        working-directory: ./cloud-security-backend
        run: npm install --legacy-peer-deps
      - name: Run backend tests
        working-directory: ./cloud-security-backend
        env:
          POSTGRES_URI: postgres://postgres:postgres@localhost:5432/cloud_security_test
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: npm test -- --forceExit --detectOpenHandles --watchAll=false --passWithNoTests

  # ---------------------
  # 2️⃣ TESTS FRONTEND
  # ---------------------
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install frontend dependencies
        working-directory: ./frontReact
        run: npm install --legacy-peer-deps
      - name: Run frontend tests
        working-directory: ./frontReact
        run: npm test -- --watchAll=false --passWithNoTests

  # ---------------------
  # 3️⃣ BUILD & PUSH DOCKER IMAGES
  # ---------------------
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push Docker images
        run: |
          docker build -t sarrarejeb01/cloud-backend:latest ./cloud-security-backend
          docker build -t sarrarejeb01/cloud-frontend:latest ./frontReact
          docker push sarrarejeb01/cloud-backend:latest
          docker push sarrarejeb01/cloud-frontend:latest

  # ---------------------
  # 4️⃣ DEPLOY ON DOCKER SWARM
  # ---------------------
  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Swarm via SSH
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: 127.0.0.1                 
          username: sarrarejeb              
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Aller dans le dossier du projet
            cd ~/cloud-security

            # Vérifier si Swarm est actif, sinon initialiser
            if ! docker info | grep -q 'Swarm: active'; then
              echo "Initializing Docker Swarm..."
              docker swarm init
            else
              echo "Swarm already active"
            fi

            # Pull des images
            docker pull sarrarejeb01/cloud-backend:latest
            docker pull sarrarejeb01/cloud-frontend:latest

            # Supprimer ancienne stack si existante
            if docker stack ls | grep -q cloud-security; then
              echo "Removing existing stack..."
              docker stack rm cloud-security
              sleep 10
            fi

            # Déployer nouvelle stack
            echo "Deploying new stack..."
            docker stack deploy -c docker-compose.yml cloud-security

            # Vérification des services
            docker service ls
            docker service logs cloud-security_backend --tail 10
            docker service logs cloud-security_frontend --tail 10
